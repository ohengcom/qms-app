name: Deploy QMS to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and build job
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint:check

      # Prisma generation removed - using Neon Serverless Driver

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package.json
            package-lock.json
          retention-days: 1

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and push Docker image
  build-image:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to production server
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            set -e
            
            # Navigate to application directory
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Pull latest code
            git pull origin main
            
            # Update environment variables
            echo "Updating environment variables..."
            
            # Create backup before deployment
            echo "Creating backup..."
            docker-compose -f docker-compose.prod.yml run --rm postgres-backup || echo "Backup failed, continuing..."
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Deploy with zero-downtime
            echo "Deploying application..."
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 30
            
            # Database migrations removed - using Neon Serverless Driver
            echo "Database migrations not needed with Neon..."
            
            # Health check
            echo "Performing health check..."
            for i in {1..30}; do
              if curl -f http://localhost/api/health; then
                echo "Health check passed"
                break
              fi
              echo "Health check attempt $i failed, retrying..."
              sleep 10
            done
            
            # Clean up old images
            docker image prune -f
            
            echo "Deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          # Wait a bit for deployment to stabilize
          sleep 60
          
          # Check if the application is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.DEPLOY_DOMAIN }}/api/health)
          if [ $response -eq 200 ]; then
            echo "✅ Deployment verification successful"
          else
            echo "❌ Deployment verification failed with status code: $response"
            exit 1
          fi

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Deploy monitoring stack
  deploy-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy monitoring stack
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            set -e
            
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Start monitoring services
            echo "Starting monitoring stack..."
            docker-compose -f docker-compose.prod.yml -f docker-compose.monitoring.yml up -d
            
            # Wait for monitoring services
            sleep 60
            
            # Verify monitoring services
            echo "Verifying monitoring services..."
            
            # Check Prometheus
            if curl -f http://localhost:9090/-/healthy; then
              echo "✅ Prometheus is healthy"
            else
              echo "❌ Prometheus health check failed"
            fi
            
            # Check Grafana
            if curl -f http://localhost:3001/api/health; then
              echo "✅ Grafana is healthy"
            else
              echo "❌ Grafana health check failed"
            fi
            
            echo "Monitoring deployment completed!"
          EOF

# Rollback workflow (can be triggered manually)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Rollback deployment
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            set -e
            
            cd ${{ secrets.DEPLOY_PATH }}
            
            echo "Starting rollback process..."
            
            # Stop current services
            docker-compose -f docker-compose.prod.yml down
            
            # Restore from latest backup
            latest_backup=$(ls -t backups/qms_backup_*.sql.gz | head -n1)
            if [ -n "$latest_backup" ]; then
              echo "Restoring from backup: $latest_backup"
              ./scripts/restore.sh "$latest_backup"
            else
              echo "No backup found, starting services without restore"
              docker-compose -f docker-compose.prod.yml up -d
            fi
            
            echo "Rollback completed!"
          EOF